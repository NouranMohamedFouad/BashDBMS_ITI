#! /usr/bin/bash

shopt -s extglob


# Define text colors
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
MAGENTA='\e[35m'
CYAN='\e[36m'
WHITE='\e[37m'

# Define background colors
BG_RED='\e[41m'
BG_GREEN='\e[42m'
BG_YELLOW='\e[43m'
BG_BLUE='\e[44m'
BG_MAGENTA='\e[45m'
BG_CYAN='\e[46m'
BG_WHITE='\e[47m'

# Text attributes
BOLD='\e[1m'
UNDERLINE='\e[4m'
RESET='\e[0m' # Reset to default


############################## Setting up the Database ######################################

database="/home/youssefmedhat/BashDBMS_ITI/DBMS_PROJECT/databases"

if [[ -e $database ]]
then
        cd $database
else
        mkdir $database
        cd $database
fi

########################## Database Menu Functionalities ########################################
column_exists() {
    name=$1
    for col in ${columnNames[@]}
    do
        if [[ $col == $name ]]
        then
            return 0 
        fi
    done
    return 1  
}

# To create a table
create_table() 
{
    echo ""
    echo -n -e "${BOLD}${CYAN}Enter table name: ${RESET}" 
    read tableName

    if [[ -e "$tableName" ]]
    then
        echo ""
        echo -e "${BOLD}${RED}Table already exists.${RESET}"
    else
        touch "$tableName"
        touch "$tableName.meta"
        
        echo -n -e "${BOLD}${CYAN}Enter the number of columns: ${RESET}" 
        read columnCount
        while ! [[ $columnCount =~ ^[0-9]+$ ]]
        do
            echo -n -e "${BOLD}${RED}Please enter a valid number for column count: ${RESET}" 
            read columnCount  
        done
        
        echo ""
        echo -e "${BOLD}${YELLOW}Choose how to handle the primary key:${RESET}"
        echo ""
        
        declare -a columnNames
        
        select choice in "Auto-generate an 'id' column as the primary key" "Use the first attribute as the primary key"
        do
            case $choice in
                "Auto-generate an 'id' column as the primary key" )
                    echo "id:integer:pkAuto" > "$tableName.meta"
                    columnNames+=("id") 
                    echo ""
                    echo -e "${BOLD}${GREEN}Auto-generated 'id' column as the primary key.${RESET}"
                    echo ""
                    break
                    ;;
                "Use the first attribute as the primary key")
                
                    echo -n -e "${BOLD}${CYAN}Enter name of the column: ${RESET}" 
                    read columnName
                    columnNames+=("$columnName")
                    
                    echo -e "${BOLD}${CYAN}Select data type of the column:${RESET}"
                    select columnType in "integer" "string" "float"
                    do
                        if [[ -n "$columnType" ]]
                        then
                            echo "$columnName:$columnType:pk" > "$tableName.meta"
                            break
                        else
                            echo -e "${BOLD}${RED}Invalid selection. Please choose a valid data type.${RESET}"
                        fi
                    done
                    break
                    ;;
            esac        
        done
        
        for (( i=1; i<columnCount; i++ ))
        do
            while true
            do
                echo -n -e "${BOLD}${CYAN}Enter name of column $((i+1)): ${RESET}" 
                read columnName
                if column_exists $columnName
                then
                    echo ""
                    echo -e "${BOLD}${RED}Column name already exists. Enter a unique name.${RESET}"
                    echo ""
                else
                    columnNames+=("$columnName")  
                    break
                fi
            done
            
            echo -e "${BOLD}${CYAN}Select data type of column $((i+1)):${RESET}"
            select columnType in "integer" "string" "float"
            do
                if [[ -n "$columnType" ]]
                then
                    echo "$columnName:$columnType" >> "$tableName.meta"
                    break
                else
                    echo -e "${BOLD}${RED}Invalid selection. Please choose a valid data type.${RESET}"
                fi
            done
        done
        
        echo ""
        echo -e "${BOLD}${GREEN}Table $tableName created successfully with its metadata.${RESET}"
        echo ""
    fi
}


# list tables
list_tables()
{
    echo ""
    echo -e "${BOLD}${CYAN}Tables in the database:${RESET}"
    tables=$(ls)  
    echo ""

    filtered_tables=""
    for name in $tables
    do 
        if [[ ! $name =~ \.meta$ ]]
        then
            filtered_tables+="$name " 
        fi
    done
    echo $filtered_tables
}

## Insert Into tables
insert_into_table() 
{
    list_tables
   
    echo ""
    echo -n -e "${BOLD}${CYAN}Enter the name of the table to insert data into: ${RESET}" 
    read tableName

    if [[ ! -e "$tableName" ]]
    then
        echo ""
        echo -e "${BOLD}${RED}Table does not exist.${RESET}"
        echo ""
        return
    fi

    declare -a columns
    declare -a types

    isAutoIncrement="false"
   
    read firstLine < $tableName.meta
    primaryKey=$(echo $firstLine | cut -d':' -f3)
    
    if [[ $primaryKey == "pkAuto" ]]
    then
            isAutoIncrement="true"
    fi
    
    while read -r line
    do
        columnName=$(echo $line | cut -d':' -f1) 
        columnType=$(echo $line | cut -d':' -f2)

        columns+=($columnName)
        types+=($columnType)

    done < "$tableName.meta"

    row=""

    if [[ $isAutoIncrement == "true" ]]
    then
        if [[ -z "$tableName" ]] 
        then
            newID=1
        else
            lastID=$(tail -n 1 $tableName | cut -d':' -f1)
            newID=$(( lastID + 1 ))
        fi
        row="$newID:"
    fi
    
    for (( i=0; i<${#columns[@]} ; i++ ))
    do
        if [[ $isAutoIncrement == "true" ]]
        then
            isAutoIncrement="false"
            continue 
        fi

        while true
        do
            echo ""
            echo -n -e "${BOLD}${CYAN}Enter value for column ${columns[i]} (${types[i]}): ${RESET} " 
            read value
            
            case ${types[i]} in
                "integer")
                    if [[ $value =~ ^[0-9]+$ ]]
                    then
                        break
                    else
                        echo -e "${BOLD}${RED}Invalid input. Please enter an integer.${RESET}"
                    fi
                    ;;
                "string")
                    if [[ $value =~ (^[a-zA-Z0-9_ ]+$) && $value =~ ([a-zA-Z]) ]]
                    then
                        break
                    else
                        echo -e "${BOLD}${RED}Invalid input. Please enter a valid string.${RESET}"
                    fi
                    ;;
                "float")
                    if [[ $value =~ ^[0-9]+\.[0-9]+$ ]]
                    then
                        break
                    else
                        echo -e "${BOLD}${RED}Invalid input. Please enter a valid float number.${RESET}"
                    fi
                    ;;
                *)
                   echo ""
                    echo -e "${BOLD}${RED}Unknown data type.${RESET}"
                    echo ""
                    ;;
            esac
        done
        row+="$value:"
    done
    row="${row::-1}"
    echo $row >> $tableName
    echo ""
    echo -e "${BOLD}${GREEN}Data inserted successfully into $tableName.${RESET}"
}


#select from table
select_from_table()
{
    PS3=$'\nPlease select a table to view from : '  
    tables=$(ls)  
    echo

    filtered_tables=""
    for name in $tables; do 
        if [[ ! $name =~ \.meta$ ]]; then
            filtered_tables+="$name " 
        fi
    done
    select choice in $filtered_tables
    do
        if [ -n "$choice" ]; then 
            tableName=$choice
            break
        else
                echo ""
                echo -e "${BOLD}${RED}Choose a valid number Please${RESET}"
                echo ""
        fi
    done

    PS3=$'\nPlease select option : '  
    if [ ! -s "$tableName" ]; then
    	clear
    	echo ""
	echo -e "${BOLD}${RED}Table is Empty!${RESET}"
	echo ""
	return
	fi
    select option in "Display all table" "Display one row"
do
clear
    case $option in
    "Display all table")
        echo ""
    	awk -F ":" '
    	BEGIN{col=1}
    	{
    	printf "\033[;%dH|%s", col,$1
    	col+=15
    	} END {print ""}' "$tableName.meta"
        awk -F ":" '
        BEGIN{row=2
        col=1
        }
        {
            i = 1
            col=1
            while (i <= NF) {
    	printf "\033[%d;%dH|%s", row,col,$i
                i++
                col+=15
            }
                row+=1
        }' $tableName
        echo ""
        break
        ;;
    
"Display one row")
    read -p "Enter PK to display: " id
    clear

    if  ! grep -q "^$id" "$tableName";  then
    echo ""
    echo -e "${BOLD}${RED}Invalid ID!${RESET}"
    echo ""
    else
        awk -F ":" '
        BEGIN {col=1}
        {
            printf "\033[0;%dH|%s", col, $1
            col += 15
        }
        END {print ""}' "$tableName.meta"

        awk -F ":" -v id="$id" '
        BEGIN {row = 2; col = 1}
        {
            if ($1 == id) {
                
                i = 1
                col = 1
                while (i <= NF) {
                    printf "\033[%d;%dH|%s", row, col, $i
                    i++
                    col += 15
                }
                row += 1
            }
        }
        ' "$tableName"
    fi
    echo ""
    break

        ;; 
    esac
done


    PS3=$'\nPlease select an option: '
}
#delete from table
delete_from_table(){
    PS3=$'\nPlease select a table to delete from : '  
    tables=$(ls)  
    echo

    filtered_tables=""
    for name in $tables; do 
        if [[ ! $name =~ \.meta$ ]]; then
            filtered_tables+="$name " 
        fi
    done
    select choice in $filtered_tables
    do
        if [ -n "$choice" ]; then 
            tableName=$choice
            break
        fi
    done
 if [ ! -s "$tableName" ]; then
    	clear
	echo "Table is Empty!"
	return
	fi
    PS3=$'\nPlease select option : '  
 read -p "Enter PK to delete: " id
    clear

    if  ! grep -q "^$id" "$tableName";  then
    echo "Invalid ID!"
    else
    sed -i "/$id/d" "$tableName"
    echo "item $id deleted succesfully!"

    fi


    PS3=$'\nPlease select an option: '
}
#update table
update_table(){
    PS3=$'\nPlease select a table to delete from : '  
    tables=$(ls)  
    echo

    filtered_tables=""
    for name in $tables; do 
        if [[ ! $name =~ \.meta$ ]]; then
            filtered_tables+="$name " 
        fi
    done
    select choice in $filtered_tables
    do
        if [ -n "$choice" ]; then 
            tableName=$choice
            break
        fi
    done
 if [ ! -s "$tableName" ]; then
    	clear
	echo "Table is Empty!"
	return
	fi
    PS3=$'\nPlease select option : '  
 read -p "Enter PK to update: " id
    clear

    if  ! grep -q "^$id" "$tableName";  then
    echo "Invalid ID!"
    else
declare -a colNames=()


colNames=($(awk -F ":" '{ print $1 }' "$tableName.meta"))
echo $colNames

select col in $colNames
do
        if [ -n "$col" ]; then 
            chosenCol=$col
            
            break
        else
                echo ""
                echo -e "${BOLD}${RED}Choose a valid number Please${RESET}"
                echo ""
        fi
    done

    fi

	
    PS3=$'\nPlease select an option: '

}


#############################################################################################
#############################################################################################
########################## Main Menu Functionalities ########################################
#############################################################################################
#############################################################################################


#to create a database
create_database() 
{
    echo ""
    echo -n -e "${BOLD}${CYAN}Please Enter Database's Name: ${RESET}"
    read dbName

    if [[ -e $dbName ]]
    then
        echo ""
        echo -e "${BOLD}${RED}Database already exists.${RESET}"
    else
        mkdir $dbName
        echo ""
        echo -e "${BOLD}${GREEN}Database $dbName is created successfully.${RESET}"
    fi
}

#to list databases
list_databases() 
{
    list_of_dbs=$(ls)  
    if [[ $list_of_dbs == "" ]]
    then
        echo ""
    	echo -e "${BOLD}${RED}No databases in the system!${RESET}"
    else
        echo ""
        echo -e "${BOLD}${CYAN}Databases in the system:${RESET}"
        echo ""
        echo $list_of_dbs
    fi
}

connect_to_database(){
    PS3=$'\nPlease select a database to connect to: '  
    list_of_dbs=$(ls)  
    if [[ $list_of_dbs == "" ]]
    then
        echo ""
    	echo -e "${BOLD}${RED}No databases in the system!${RESET}"
    else
    select choice in $list_of_dbs 
    do
        if [ -n "$choice" ]; then 
            cd "$choice"  
            echo ""
            echo -e "${BOLD}${GREEN}You are now connected to $choice.${RESET}"
            
            database_menu
            break
        else
            echo ""
            echo -e "${BOLD}${RED}Invalid choice. Please select a valid database.${RESET}"
        fi
    done
    fi
cd $database
PS3=$'\nPlease select an option: '
}

#to drop database
drop_database(){
    PS3=$'\nPlease select a database to drop : '  
    list_of_dbs=$(ls)  
    if [[ $list_of_dbs == "" ]]
    then
    	echo -e "${BOLD}${RED}No databases in the system!${RESET}"
    else
    select choice in $list_of_dbs  
    do
        if [ -n "$choice" ]
        then 
            rmdir  $choice 
            echo ""
            echo -e "${BOLD}${GREEN}You are dropped table $choice.${RESET}"
            break
        else
            echo ""
            echo -e "${BOLD}${RED}Invalid choice. Please select a valid database.${RESET}"
        fi
    done
    fi
cd $database
PS3=$'\nPlease select an option: '
}


########################## Database Menu ########################################

database_menu() {
    PS3=$'\nPlease select an option: '
    
    while true
    do
        echo " "
        echo -e "${BOLD}${CYAN}<------------- DATABASE MENU ------------->${RESET}"
        echo " "
        select dbChoice in "Create Table" "List Tables" "Drop Table" "Insert into Table" "Select From Table" "Delete From Table" "Update Table" "Back to Main Menu"
        do
        clear
            case $dbChoice in
                "Create Table")
                    create_table
                    break
                    ;;
                "List Tables")
                    list_tables
                    break
                    ;;
                "Drop Table")

                    break
                    ;;
                 "Insert into Table")
                    insert_into_table
                    break
                    ;;
                 "Select From Table")
                    select_from_table
                    break
                    ;;
                "Delete From Table")
                    delete_from_table
                    break
                    ;;
                    "Update Table")
                    update_table
                    break
                    ;;
                "Back to Main Menu")
                    cd "$database"
                    return
                    ;;
                *)
                    echo -e "${BOLD}${RED}Invalid choice. Please choose from the menu.${RESET}"
                    ;;
            esac
        done
    done
}

########################## Main Menu  ########################################
PS3=$'\nPlease select an option: '

wantsToExit=1
while [[ $wantsToExit -eq 1 ]]
do
        echo " "
	echo -e "${BOLD}${CYAN}<------------------- WELCOME TO THE DATABASE --------------------->${RESET}"
	echo ""
	select choice in "Create Database" "List Databases" "Connect To Databases" "Drop Database" "Exit"
	do
            
	    case $choice in
		"Create Database")
		        clear
		        create_database 
		        break
		    ;;
		"List Databases")
		        clear
		        list_databases
		        break
		    ;;
		"Connect To Databases")
		        clear
		    	connect_to_database
		    	break
		    ;;
		"Drop Database")
		        clear
		    	drop_database
		    	break
		    ;;
		"Exit") 
		    	wantsToExit=0
		        echo ""
		    	echo -e "${BOLD}${BG_CYAN}Exiting...${RESET}"
		    	echo ""
		    	break
		    ;;
		*)
		    echo ""
		    echo -e "${BOLD}${RED}Invalid choice. Please choose from 1 to 5. ${RESET}"
		    ;;
	    esac
	done
done
